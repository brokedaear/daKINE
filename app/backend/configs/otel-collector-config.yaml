# SPDX-FileCopyrightText: 2025 BROKE DA EAR LLC <https://brokedaear.com>
#
# SPDX-License-Identifier: Apache-2.0
receivers:
  # Receive gRPC telemetry data from your application
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318
  # Collect metrics from the collector itself
  prometheus:
    config:
      scrape_configs:
        - job_name: "otel-collector"
          scrape_interval: 5s
          static_configs:
            - targets: ["127.0.0.1:8888"]
processors:
  # Basic processing
  batch:
    timeout: 1s
    send_batch_size: 1024
  # Add resource attributes
  resource:
    attributes:
      - key: service.namespace
        value: "bde"
        action: upsert
      - key: deployment.environment
        value: "local"
        action: upsert
      - key: level
        from_attribute: "log.severity"
        action: upsert
  # Memory limiter to prevent OOM
  memory_limiter:
    limit_mib: 512
    check_interval: 1s
exporters:
  # Export metrics to Prometheus
  prometheus:
    endpoint: "0.0.0.0:8889"
    const_labels:
      environment: "local"
  # Export traces to Jaeger via OTLP
  otlp/jaeger:
    endpoint: jaeger:4317
    tls:
      insecure: true
  # Export logs to Loki
  loki:
    endpoint: http://loki:3100/loki/api/v1/push
  # Debug logging (optional)
  debug:
    verbosity: normal
extensions:
  health_check:
  pprof:
  zpages:
service:
  extensions: [health_check, pprof, zpages]
  pipelines:
    # Metrics pipeline: OTLP -> Prometheus
    metrics:
      receivers: [otlp]
      processors: [memory_limiter, resource, batch]
      exporters: [prometheus, debug]
    # Traces pipeline: OTLP -> Jaeger
    traces:
      receivers: [otlp]
      processors: [memory_limiter, resource, batch]
      exporters: [otlp/jaeger, debug]
    # Logs pipeline: OTLP -> Loki
    logs:
      receivers: [otlp]
      processors: [memory_limiter, resource, batch]
      exporters: [loki, debug]
